1) Задаем размеры heap в 4 mb с помощью  ключей '-Xmx4m -Xms4m' через VМ options у класса User.
2) Переопределяем метод finalize с выводом сообщения об удалении объекта при автоматическом запуске сборщика мусора.
3) Для тестирования работы GC в методе main создаем 3 объекта с инициализацией и наравне с ними, цикл для создания
аналогичных объектов без декларирования, что соответсвенно приведет к отсутсвию ссылок на них в дальнейшем раскладе.
4) Запускаем метод main.
5) Цикл начинает работать и участок памяти eden находящийся в heap постепенно заполняется новосозданными объектами User.
Тип GC который использует JDK 16 - это G1. Соответственно он является Parallel, Concurrent, Copying. G1 работает
одновременно с циклом for и не ждет пока heap заполнится полностью, он периодически производит удаления объектов без
ссылок. События Stop The World занимают мало времени, поэтому параллельная работа сборщика мусора практически
не заметна нам.
В нашей программе aging происхоит только у первых трёх созданных продекларированных объекта и они будут оставаться
в heap пока работает for, остальные (из цикла) будут подвергаться удалению из памяти.








